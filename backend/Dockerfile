# ============================================================================
# 后端 Dockerfile - 数据库加载优化版
# ============================================================================
# 确保数据库和CSV文件正确加载，解决服务器部署问题
# ============================================================================

FROM python:3.11-slim

# ────────────────────────────────────────────────────────────────────────────
# 第一层：系统依赖
# ────────────────────────────────────────────────────────────────────────────
RUN sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list.d/debian.sources && \
    apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# ────────────────────────────────────────────────────────────────────────────
# 第二层：Python 依赖
# ────────────────────────────────────────────────────────────────────────────
WORKDIR /app

COPY requirements.txt .

RUN pip install --no-cache-dir --upgrade pip -i https://mirrors.aliyun.com/pypi/simple/ && \
    pip install --no-cache-dir \
    --only-binary=:all: \
    -r requirements.txt \
    -i https://mirrors.aliyun.com/pypi/simple/ \
    || pip install --no-cache-dir -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/

# ────────────────────────────────────────────────────────────────────────────
# 第三层：创建必要的目录结构
# ────────────────────────────────────────────────────────────────────────────
RUN mkdir -p /app/data/input /app/data/output /app/logs

# ────────────────────────────────────────────────────────────────────────────
# 第四层:复制数据文件（关键！必须在应用代码之前）
# ────────────────────────────────────────────────────────────────────────────
# 注意：由于Docker构建上下文限制，CSV文件将通过volume挂载在运行时提供
# 这里创建一个占位文件，确保目录结构正确
RUN echo "CSV,文件,将,通过,volume,挂载,提供" > /app/data/input/placeholder.csv

# ────────────────────────────────────────────────────────────────────────────
# 第五层：复制应用代码
# ────────────────────────────────────────────────────────────────────────────
COPY . .

# ────────────────────────────────────────────────────────────────────────────
# 环境变量
# ────────────────────────────────────────────────────────────────────────────
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TZ=Asia/Shanghai \
    DATA_DIR=/app/data \
    DB_PATH=/app/data/database.db

# ────────────────────────────────────────────────────────────────────────────
# 验证文件和目录（调试用）
# ────────────────────────────────────────────────────────────────────────────
RUN echo "========================================" && \
    echo "文件结构检查:" && \
    echo "========================================" && \
    echo "应用目录:" && ls -la /app/ && \
    echo "----------------------------------------" && \
    echo "数据目录:" && ls -la /app/data/ && \
    echo "----------------------------------------" && \
    echo "输入目录:" && ls -la /app/data/input/ && \
    echo "========================================" && \
    if [ -f "/app/data/input/汇总表.csv" ]; then \
        echo "✓ 找到汇总表.csv" && \
        wc -l /app/data/input/汇总表.csv; \
    else \
        echo "❌ 未找到汇总表.csv"; \
    fi && \
    echo "========================================"

# ────────────────────────────────────────────────────────────────────────────
# 健康检查
# ────────────────────────────────────────────────────────────────────────────
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/health', timeout=5)" || exit 1

# ────────────────────────────────────────────────────────────────────────────
# 暴露端口
# ────────────────────────────────────────────────────────────────────────────
EXPOSE 8000

# ────────────────────────────────────────────────────────────────────────────
# 启动命令
# ────────────────────────────────────────────────────────────────────────────
CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]
