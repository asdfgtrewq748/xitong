#!/bin/bash
# ============================================================================
# 服务器端自动部署脚本
# ============================================================================
# 用途: 在服务器上拉取最新代码并重新构建 Docker 容器
# 使用: ./server-deploy.sh
# ============================================================================

set -e  # 遇到错误立即退出

echo "=========================================="
echo "🚀 开始部署煤层地质建模系统"
echo "=========================================="

# 进入项目目录
PROJECT_DIR="/var/www/xitong"  # 根据实际路径修改
cd "$PROJECT_DIR" || { echo "❌ 项目目录不存在: $PROJECT_DIR"; exit 1; }

echo ""
echo "📂 当前目录: $(pwd)"
echo ""

# ──────────────────────────────────────────────────────────────────────────
# 步骤 1: 备份当前运行的容器（如果需要回滚）
# ──────────────────────────────────────────────────────────────────────────
echo "1️⃣  检查当前运行的容器..."
if docker compose ps | grep -q "mining"; then
    echo "✓ 发现运行中的容器"
    docker compose ps
else
    echo "ℹ️  没有运行中的容器"
fi

# ──────────────────────────────────────────────────────────────────────────
# 步骤 2: 拉取最新代码
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "2️⃣  拉取最新代码..."
git fetch origin
git reset --hard origin/master  # 强制同步到远程 master 分支
echo "✓ 代码已更新到最新版本"
git log --oneline -3

# ──────────────────────────────────────────────────────────────────────────
# 步骤 3: 停止并删除旧容器
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "3️⃣  停止旧容器..."
docker compose down || echo "⚠️  没有需要停止的容器"

# ──────────────────────────────────────────────────────────────────────────
# 步骤 4: 清理旧镜像（可选，节省空间）
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "4️⃣  清理未使用的 Docker 资源..."
docker system prune -f --volumes || echo "⚠️  清理跳过"

# ──────────────────────────────────────────────────────────────────────────
# 步骤 5: 重新构建镜像
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "5️⃣  重新构建 Docker 镜像..."
docker compose build --no-cache
echo "✓ 镜像构建完成"

# ──────────────────────────────────────────────────────────────────────────
# 步骤 6: 启动新容器
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "6️⃣  启动新容器..."
docker compose up -d
echo "✓ 容器已启动"

# ──────────────────────────────────────────────────────────────────────────
# 步骤 7: 等待服务启动
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "7️⃣  等待服务启动..."
sleep 10

# ──────────────────────────────────────────────────────────────────────────
# 步骤 8: 检查容器状态
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "8️⃣  检查容器状态..."
docker compose ps

# ──────────────────────────────────────────────────────────────────────────
# 步骤 9: 健康检查
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "9️⃣  执行健康检查..."

# 检查后端
if curl -f http://localhost:8000/health 2>/dev/null; then
    echo "✓ 后端服务正常"
else
    echo "⚠️  后端服务可能未就绪，检查日志:"
    docker compose logs --tail=20 backend
fi

# 检查前端
if curl -f http://localhost 2>/dev/null | grep -q "煤层"; then
    echo "✓ 前端服务正常"
else
    echo "⚠️  前端服务可能未就绪，检查日志:"
    docker compose logs --tail=20 frontend
fi

# ──────────────────────────────────────────────────────────────────────────
# 步骤 10: 显示最终状态
# ──────────────────────────────────────────────────────────────────────────
echo ""
echo "=========================================="
echo "✅ 部署完成！"
echo "=========================================="
echo "服务访问地址:"
echo "  - 前端: http://$(hostname -I | awk '{print $1}')"
echo "  - 后端: http://$(hostname -I | awk '{print $1}'):8000"
echo ""
echo "查看日志:"
echo "  docker compose logs -f backend"
echo "  docker compose logs -f frontend"
echo "=========================================="
